Final exam
Bo Yu ( byu1@stevens.edu)

1)

	Unix Shell is a program execution environment. It accepts user's
	command, execute the command, then wait for the next user's input. 
	
	When user input a command, the shell will keep the whole input into
	a buffer, and parse the input, understand each token, such as program
	name, program arguments, redirection signs like '|', '<' or '>'.

	If the input doesn't contain redirection signs, then shell will create
	a new child process, and call the exec() function to execute the user's
	command within the child process; at the same time, the parent process
	will wait for child's termination. And then, shell will wait for the
	next user's input.
	
	If the input contains redirection signs, shell should analyze them 
	carefully, to determine who is the input side, who is the output side.
	Let's say input side is A, and output side is B. More complexity, shell
	may resolve the situation which involved more redirection signs.

	With a command contains redirection signs, shell will create a pipeline 
	in order to communicate between two processes. Then shell will create a
	new process to handle B as we mentioned above. 
	
	In the parent process, shell will make sure that the A's execution output
	will re-direct to child process's input. Then parent process will 
	execute A, and then wait for child process's termination.
	
	In the child process, shell will make sure that the input will come from 
	parent's output. It can be achieved by manipulating pipeline. Then use 
	exec() to execute B. After B has been executed, shell will go to parent 
	process, and wait for the next user's input.
	
	Usually user may cancels the program's execution by input 'ctrl+C'. To
	handle this situlation, the shell should register a signal handler.
	In the handler function, shell should kill the executing process.

	Sometimes use will change the working directory, so shell should change
	it carefully to take care of the pathname.

	Shell will be quit when user input 'exit' command or when system shutdown, 
	shell should do some cleanup before exit.

2)

	shell program entry:
		register a signal handler to handle shell termination by 'Ctrl+C'

		while ( get_input() )
			
			parse_input() to extract program name, arguments, or
			redirection signs
			
			if input equals to 'exit' then exit

			if input is a simple command then
				fork a child process to execute command
				parent wait until child exits
				go to next loop
			end

			if input contains redirection signs then

				create a pipe to communicate between two processes

				fork a child process

				[in the parent process]
					if input contains redirection characters such as '|' '<' '>'
						let output redirect to child's input
						execute programA by fork another process
					endif

					wait for child's termination
				
				[in the child process]
					if input contains redirection characters such as '|' '<' '>'
						direct input from parent's output
						execute programB
					endif
			endif
		end while

3) 

	One deficiency with creat is that the file is opened only for writing.
	If we were creating a temporary file that we wanted to write and then 
	read back, we had to call creat, close, and then open.

	Another issue is that before we writing content to a file, other 
	processes may write something to our file, so inconsistency may happened.

4)

	Disk is filling up.
	The file size limit for a given process has been exceeded.

5)

	Randomly. No body can make sure which one runs first.

6)

	It depends. Different systems have different answers.

	For example, I checked Linux system, it said
	#define NGROUPS_MAX    65536    /* supplemental group IDs are available */

	So we have to get the answer based on different system.

7)
	
	Use API in the grp.h 
		struct group *getgrnam (const char *name);
	
	The filed gr_mem of struct group is an array of pointers to the user names
	that belong to this group.

	If we want to search the entire group file, we need some additional
	functions.
		struct group *getgrent(void);
		void setgrent(void);
		void endgrent(void);

8)
	
	1. jschauma
	can read, write, remove each of the files

	2. root
	can read, write, remove each of the files

	3. all users in group wheel
	can read file1, file2, file4, can write file1, file4 

	4. all users in group sys
	can read file2

	5. all users in group users
	N/A		

	6. all other users
	N/A

9)
	
	File Descriptor Table.
	Current working directory.
	Process State.
	Stack Segment Pointer.

10)

	1.
	#include <sys/socket.h>
	accept();
	If sockfd is in nonblocking mode, accept will return -1.

	2.
	read(STDIN_FILENO, buf, sizeof(buf));
	Use this to avoid blocking: 
	fcntl ( STDIN_FILENO, O_NONBLOCK, 0 );
	
	3. 
	write ( STDOUT_FILENO, buf, sizeof(buf) );
	Use this to avoid blocking:
	fcntl ( STDOUT_FILENO, O_NONBLOCK, 0 );

	4.
	open ();
	Use this to avoid blocking:
	select ();

11)

	(a)
	File Mode shows that Bob don't have READ permission for file1.
	
	(b)
	sud - susan will Simulate a full login. The environment has been
	changed. Now the environment is susan's. So susan can read file2.

12)

	This program use chdir() to change the current working directory
	of the calling process. But the current working directory cannot
	affect processes that invoke the process that executes the chdir.
	So shell's current working directory cannot be changed.

13)

	For the fist attempt ./a.out
	fork() will create a new process, and the program will have two 
	seprate roads, the parent one will output "write4" after 2 seconds,
	and child will output "write3" and "write4" before that.

	For the second attempt ./a.out | cat
	It is affected by buffering and re-direction. 
	"write1" "write3" "write2" "write4" wll be print out first.
	Due the sleep(2) call in the parent process, "write2" and "write4"
	are buffered and redirection, so they are printed after two seconds.

14)

	See the subdirectory 14

15)
	
	See the subdirectory 15

16)

	See the subdirectory 16

